# load libraries
library(caret)
library(randomForest)
view(dataset)
# load dataset
dataset <- read.csv('/Users/andyconverse/Documents/Hamline Acedmics/Hamline 2024-25/Hamline Spring 25/QMBE 3730/QMBE_3730_Andy_Converse/Untitled/Classification and comparing models/loan_default_data_set.csv'
)
view(dataset)
library(tidyverse)
library(caTools)
# load dataset
dataset <- read.csv('/Users/andyconverse/Documents/Hamline Acedmics/Hamline 2024-25/Hamline Spring 25/QMBE 3730/QMBE_3730_Andy_Converse/Untitled/Classification and comparing models/loan_default_data_set.csv'
)
view(dataset)
# 1. EDA
dim(dataset)
str(dataset)
sum(is.na(dataset))
sum(duplicated(dataset))
summary(dataset)
# 2.
sum(duplicated(dataset))
# 2.
sum(is.na(dataset))
# 2.
colSums(is.na(dataset))
# 2.
sum(is.na(dataset))
colSums(is.na(dataset)) / 3517
colSums(is.na(dataset)) / sum(is.na(dataset))
dataset_clean <- na.omit(dataset)
## 3.
colSums(duplicated(dataset_clean))
## 3.
sum(duplicated(dataset_clean))
str(dataset)
sum(is.na(dataset_clean))
ggplot(data = dataset_clean,
aes(x = tot_balance,
y = credit_age)) +
geom_point() +
labs(title = "Total Available Balance vs Age of First Credit Product",
x = "Total Available Balance of all Credit Products",
y = "Age of First Credit Product (in Months)",
theme_gray()
)
ggplot(data = dataset_clean,
aes(x = tot_balance,
y = credit_age)) +
geom_point() +
labs(title = "Total Available Balance vs Age of First Credit Product",
x = "Total Available Balance of all Credit Products",
y = "Age of First Credit Product (in Months)",
theme_dark()
)
ggplot(data = dataset_clean,
aes(x = tot_balance,
y = credit_age)) +
geom_point() +
labs(title = "Total Available Balance vs Age of First Credit Product",
x = "Total Available Balance of all Credit Products ($)",
y = "Age of First Credit Product (in Months)",
theme_dark()
)
table(dataset_clean$rep_education)
## 6.
table(dataset_clean$rep_education)/nrows(dataset_clean)
## 6.
table(dataset_clean$rep_education)/16653
## 7.
table(dataset_clean$Def_ind)
## 7.
table(dataset_clean$Def_ind)/16653
## 8.
hist(dataset_clean$rep_income,
main = "Distrubtion of Annual Income",
xlab = "Annual Income ($)",
col = "green",
border = "black")
## 8.
summary(dataset_clean$rep_income)
## 9.
dataset_clean$Def_ind %>%
group_by(dataset_clean$rep_education)
## 9.
group1 <- data %>%
group_by(dataset_clean$rep_education) %>%
summarise(total_count = n(),
)
## 9.
group1 <- data %>%
group_by(dataset_clean$rep_education) %>%
summarise(total_count = n(),
default_count = sum(dataset_clean$Def_ind == 1),
default_rate = mean(dataset_clean$Def_ind == 1) * 100) %>%
arrange(desc(default_rate))
## 9.
group1 <- data %>%
group_by(dataset_clean$rep_education) %>%
summarise(total_count = n(),
default_count = sum(dataset_clean$Def_ind == 1),
default_rate = mean(dataset_clean$Def_ind == 1) * 100) %>%
arrange(desc(default_rate))
## 9.
group1 <- dataset_clean %>%
group_by(rep_education) %>%
summarise(total_count = n(),
default_count = sum(Def_ind == 1),
default_rate = mean(Def_ind == 1) * 100) %>%
arrange(desc(default_rate))
group1
## 9.
group_default.by.edu <- dataset_clean %>%
group_by(rep_education) %>%
summarise(total_count = n(),
default_count = sum(Def_ind == 1),
default_rate = mean(Def_ind == 1) * 100) %>%
arrange(desc(default_rate))
group_default.by.edu
# load libraries
library(caret)
library(randomForest)
library(tidyverse)
library(caTools)
# load dataset
dataset <- read.csv('/Users/andyconverse/Documents/Hamline Acedmics/Hamline 2024-25/Hamline Spring 25/QMBE 3730/QMBE_3730_Andy_Converse/Untitled/Classification and comparing models/loan_default_data_set.csv'
)
view(dataset)
# 1. EDA
dim(dataset)
# 2.
sum(is.na(dataset))
colSums(is.na(dataset))
colSums(is.na(dataset)) / sum(is.na(dataset))
dataset_clean <- na.omit(dataset)
## 3.
sum(duplicated(dataset_clean))
str(dataset)
## 5.
ggplot(data = dataset_clean,
aes(x = tot_balance,
y = credit_age)) +
geom_point() +
labs(title = "Total Available Balance vs Age of First Credit Product",
x = "Total Available Balance of all Credit Products ($)",
y = "Age of First Credit Product (in Months)",
theme_dark()
)
## 6.
table(dataset_clean$rep_education)/16653
## 7.
table(dataset_clean$Def_ind)/16653
## 8.
summary(dataset_clean$rep_income)
hist(dataset_clean$rep_income,
main = "Distrubtion of Annual Income",
xlab = "Annual Income ($)",
col = "green",
border = "black")
## 9.
group_default.by.edu <- dataset_clean %>%
group_by(rep_education) %>%
summarise(total_count = n(),
default_count = sum(Def_ind == 1),
default_rate = mean(Def_ind == 1) * 100) %>%
arrange(desc(default_rate))
group_default.by.edu
dim(train_data)
split <- sample.split(dataset_clean$Def_ind,
SplitRatio = 0.8)
train_data <- subset(dataset_clean,
split == TRUE)
test_data <- subset(dataset_clean,
split == FALSE)
dim(train_data)
dim(test_data)
log_model <- glm(Def_ind ~ .,
data = dataset_clean,
family = binomial()
)
summary(log_model)
pred_probs <- predict(log_model,
test_data,
type = "response")
pred_default <- ifelse(pred_probs > 0.5,
1,
0)
head(pred_probs)
head(pred_default)
conf_matrix <- table(Predicted = pred_default,
Actual = test_data$Def_ind)
conf_matrix
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
accuracy
print(conf_matrix)
print(paste("Accuracy:",
round(accuracy,
4)))
precision(conf_matrix)
TN <- conf_matrix[1, 1]
FP <- conf_matrix[1, 2]
FN <- conf_matrix[2, 1]
TP <- conf_matrix[2, 2]
accuracy <- (TP + TN) / (TP + TN + FP + FN)
accuracy
precision <- TP / (TP + FP)
precision
recall <- TP / (TP + FN)
recall
library(pROC)
plot(roc_curve,
main = "ROC Curve",
col = "dodgerblue")
roc_curve <- roc(test_data$Def_ind,
pred_probs)
plot(roc_curve,
main = "ROC Curve",
col = "dodgerblue")
auc_val <- auc(roc_curve)
print(paste("AUC:", auc_val))
auc_val <- auc(roc_curve)
print(paste("AUC:", auc_val))
knn_model <- train(Def_ind ~.,
data = train_data,
method = 'knn',
tuneLength=5)
knn_model
knn_model <- train(Def_ind ~.,
data = train_data,
method = 'knn',
tuneLength=5)
pred_knn <- predict(knn_model,
test_data)
pred_knn <- predict(knn_model,
test_data)
pred_knn <- predict(knn_model,
test_data)
print(confusionMatrix(pred_knn,
test_data$Def_ind))
print(confusionMatrix(pred_knn, test_data$Def_ind))
print(confusionMatrix(pred_knn, test_data$Def_ind))
knn_model <- train(Def_ind ~.,
data = train_data,
method = 'knn',
tuneLength = 5)
pred_knn <- predict(knn_model,
test_data)
print(confusionMatrix(pred_knn, test_data$Def_ind))
train_data$Def_ind <- as.factor(train_data$Def_ind)
test_data$Def_ind <- as.factor(test_data$Def_ind)
knn_model <- train(Def_ind ~.,
data = train_data,
method = 'knn',
tuneLength = 5)
pred_knn <- predict(knn_model,
test_data)
print(confusionMatrix(pred_knn, test_data$Def_ind))
### DT model
dt_model <- train_data(Def_ind ~ .,
data= train_data,
method = 'rpart')
### DT model
dt_model <- train_data(Def_ind ~ .,
data= train_data,
method = 'rpart')
pred_dt <- predict(dt_model,
test_data)
print(confusionMatrix(pred_dt,
test_data$Def_ind))
### DT model
dt_model <- train(Def_ind ~ .,
data= train_data,
method = 'rpart')
pred_dt <- predict(dt_model,
test_data)
print(confusionMatrix(pred_dt,
test_data$Def_ind))
accuracy
precision
recall
conf_matrix
15%, and 65%, respectful.
TN
TN
FP
FN
TP
print(confusionMatrix(pred_dt,
test_data$Def_ind))
print(confusionMatrix(pred_knn, test_data$Def_ind))
summary(log_model)
print(confusionMatrix(pred_knn, test_data$Def_ind))
print(confusionMatrix(pred_dt,
test_data$Def_ind))
